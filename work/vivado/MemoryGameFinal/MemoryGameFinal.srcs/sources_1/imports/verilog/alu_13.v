/*
   This file was generated automatically by Alchitry Labs version 1.2.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_13 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn_signal,
    output reg [15:0] alu,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_adder1_out;
  wire [1-1:0] M_adder1_z;
  wire [1-1:0] M_adder1_v;
  wire [1-1:0] M_adder1_n;
  reg [16-1:0] M_adder1_a;
  reg [16-1:0] M_adder1_b;
  reg [6-1:0] M_adder1_alufn_signal;
  adder_17 adder1 (
    .a(M_adder1_a),
    .b(M_adder1_b),
    .alufn_signal(M_adder1_alufn_signal),
    .out(M_adder1_out),
    .z(M_adder1_z),
    .v(M_adder1_v),
    .n(M_adder1_n)
  );
  
  wire [16-1:0] M_comp1_out;
  reg [1-1:0] M_comp1_z;
  reg [1-1:0] M_comp1_v;
  reg [1-1:0] M_comp1_n;
  reg [6-1:0] M_comp1_alufn_signal;
  compare_18 comp1 (
    .z(M_comp1_z),
    .v(M_comp1_v),
    .n(M_comp1_n),
    .alufn_signal(M_comp1_alufn_signal),
    .out(M_comp1_out)
  );
  
  wire [16-1:0] M_boole1_out;
  reg [16-1:0] M_boole1_a;
  reg [16-1:0] M_boole1_b;
  reg [6-1:0] M_boole1_alufn_signal;
  boolean_19 boole1 (
    .a(M_boole1_a),
    .b(M_boole1_b),
    .alufn_signal(M_boole1_alufn_signal),
    .out(M_boole1_out)
  );
  
  wire [16-1:0] M_shifter1_out;
  reg [16-1:0] M_shifter1_a;
  reg [4-1:0] M_shifter1_b;
  reg [6-1:0] M_shifter1_alufn_signal;
  shifter_20 shifter1 (
    .a(M_shifter1_a),
    .b(M_shifter1_b),
    .alufn_signal(M_shifter1_alufn_signal),
    .out(M_shifter1_out)
  );
  
  wire [16-1:0] M_mult_out;
  reg [16-1:0] M_mult_a;
  reg [16-1:0] M_mult_b;
  reg [6-1:0] M_mult_alufn_signal;
  multiplier_21 mult (
    .a(M_mult_a),
    .b(M_mult_b),
    .alufn_signal(M_mult_alufn_signal),
    .out(M_mult_out)
  );
  
  always @* begin
    M_adder1_a = a;
    M_adder1_b = b;
    M_adder1_alufn_signal = alufn_signal;
    M_comp1_v = M_adder1_v;
    M_comp1_n = M_adder1_n;
    M_comp1_z = M_adder1_z;
    M_comp1_alufn_signal = alufn_signal;
    M_boole1_a = a;
    M_boole1_b = b;
    M_boole1_alufn_signal = alufn_signal;
    M_shifter1_a = a;
    M_shifter1_b = b[0+3-:4];
    M_shifter1_alufn_signal = alufn_signal;
    M_mult_a = a;
    M_mult_b = b;
    M_mult_alufn_signal = alufn_signal;
    
    case (alufn_signal[4+1-:2])
      2'h0: begin
        
        case (alufn_signal[0+1-:2])
          2'h2: begin
            alu = M_mult_out;
          end
          default: begin
            alu = M_adder1_out;
          end
        endcase
      end
      2'h1: begin
        alu = M_boole1_out;
      end
      2'h2: begin
        alu = M_shifter1_out;
      end
      2'h3: begin
        alu = M_comp1_out;
      end
      default: begin
        alu = 8'h00;
      end
    endcase
    z = M_adder1_z;
    v = M_adder1_v;
    n = M_adder1_n;
  end
endmodule
