/*
   This file was generated automatically by Alchitry Labs version 1.2.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input red_button,
    input green_button,
    input blue_button,
    input yellow_button,
    input start,
    input next,
    output reg red_led,
    output reg green_led,
    output reg blue_led,
    output reg yellow_led,
    output reg [7:0] status_seg,
    output reg [3:0] status_sel,
    output reg [7:0] life_seg,
    output reg [3:0] life_sel
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [(3'h6+0)-1:0] M_buttoncond_out;
  reg [(3'h6+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<3'h6;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_2 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(3'h6+0)-1:0] M_buttondetector_out;
  reg [(3'h6+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<3'h6;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_3 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [1-1:0] M_game_red;
  wire [1-1:0] M_game_green;
  wire [1-1:0] M_game_blue;
  wire [1-1:0] M_game_yellow;
  wire [4-1:0] M_game_status_sel;
  wire [7-1:0] M_game_status_seg;
  wire [4-1:0] M_game_lives_sel;
  wire [7-1:0] M_game_lives_seg;
  wire [24-1:0] M_game_io_led;
  reg [6-1:0] M_game_buttons;
  gameplay_4 game (
    .clk(clk),
    .rst(rst),
    .buttons(M_game_buttons),
    .red(M_game_red),
    .green(M_game_green),
    .blue(M_game_blue),
    .yellow(M_game_yellow),
    .status_sel(M_game_status_sel),
    .status_seg(M_game_status_seg),
    .lives_sel(M_game_lives_sel),
    .lives_seg(M_game_lives_seg),
    .io_led(M_game_io_led)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    usb_tx = usb_rx;
    io_led = M_game_io_led;
    io_seg = 8'hff;
    io_sel = 4'hf;
    io_led[16+0+0-:1] = red_button;
    io_led[16+1+0-:1] = green_button;
    io_led[16+2+0-:1] = blue_button;
    io_led[16+3+0-:1] = yellow_button;
    io_led[16+5+0-:1] = start;
    io_led[16+6+0-:1] = next;
    red_led = M_game_red;
    green_led = M_game_green;
    blue_led = M_game_blue;
    yellow_led = M_game_yellow;
    M_buttoncond_in[3+0-:1] = red_button;
    M_buttoncond_in[2+0-:1] = green_button;
    M_buttoncond_in[1+0-:1] = blue_button;
    M_buttoncond_in[0+0-:1] = yellow_button;
    M_buttoncond_in[4+0-:1] = start;
    M_buttoncond_in[5+0-:1] = next;
    M_buttondetector_in = M_buttoncond_out;
    M_game_buttons = M_buttondetector_out;
    status_sel = M_game_status_sel;
    status_seg = M_game_status_seg;
    life_seg = M_game_lives_seg;
    life_sel = M_game_lives_sel;
    io_seg = M_game_status_seg;
    io_sel = M_game_status_sel;
  end
endmodule
