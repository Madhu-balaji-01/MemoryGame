module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
   
    //Button inputs from player 
    input red_button,
    input green_button,
    input blue_button,
    input yellow_button,
    input start,
    input next,
    
    //LED outputs
    output red_led,
    output green_led,
    output blue_led,
    output yellow_led,
    
    output status_seg[8],
    output status_sel[4],
    
    output life_seg[8],
    output life_sel[4]  
    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner buttoncond[6];
    edge_detector buttondetector[6](#RISE(1), #FALL(0));  //detect on rising edge only
   
  }

  gameplay game(.clk(clk), .rst(rst));

  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    
    usb_tx = usb_rx;        // echo the serial data
    io_led = game.io_led;   // debugging
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
   
    //testing buttons
    io_led[2][0] = red_button;
    io_led[2][1] = green_button;
    io_led[2][2] = blue_button;
    io_led[2][3] = yellow_button;
    io_led[2][5] = start;
    io_led[2][6] = next;
    
    
    //red_led = b0;
    //yellow_led = b0;
    //green_led = b0;
    
    red_led = game.red;
    green_led = game.green;
    blue_led = game.blue;
    yellow_led= game.yellow;
    
    //Button conditioners to prevent bouncing 
    buttoncond.in[3] = red_button;
    buttoncond.in[2] = green_button;
    buttoncond.in[1] = blue_button;
    buttoncond.in[0] = yellow_button;
    
    buttoncond.in[4] = start;
    buttoncond.in[5] = next;
    
    buttondetector.in[5:0] = buttoncond.out[5:0];
    game.buttons[5:0] = buttondetector.out[5:0];
    
    //First 7 seg for showing status
    status_sel = game.status_sel;
    status_seg = game.status_seg;
    
    //Second 7seg shows number of remaining lives
    life_seg = game.lives_seg;
    life_sel = game.lives_sel;
    
    //debug
    io_seg=game.status_seg;
    io_sel=game.status_sel;
    
  }
}